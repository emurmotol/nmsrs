<div class="row">
    <div class="col-lg-6">
        <div class="panel panel-default">
            <div class="panel-heading clearfix">
                <span class="pull-left"><i class="fa fa-pencil"></i> Edit Profile</span>
                <span class="pull-right">
                    <a href="/users/{{.user.ID}}" class="btn btn-primary btn-xs">View profile</a>
                </span>
            </div>
            <div class="panel-body">
                <form action="/users/{{.user.ID}}" method="POST" id="edit_profile_form" enctype="multipart/form-data">
                    <input type="hidden" name="_method" value="PUT">
                    <div class="form-group{{with .editProfileForm.Errors.Photo}} has-error{{end}}">
                        <label for="photo" class="control-label">Photo</label><br>
                        <img src="{{if .user.HasPhoto}}{{photoPath .user.ID `User`}}{{else}}{{config.default.photo.path}}{{end}}" data-default-photo="{{if .user.HasPhoto}}{{photoPath .user.ID `User`}}{{else}}{{config.default.photo.path}}{{end}}"
                            class="img-resopnsive img-rounded" id="preview" height="160" alt="User Photo">
                        <input type="file" class="form-control" name="photo" id="photo" data-parsley-trigger="change" data-parsley-maxmegabytes="{{config.default.photo.maxSize}}"
                            data-parsley-mimes="{{config.default.photo.mimes}}">
                        {{with .editProfileForm.Errors.Photo}}<span class="help-block">{{.}}</span>{{end}}
                    </div>
                    <div class="form-group{{with .editProfileForm.Errors.Name}} has-error{{end}}">
                        <label for="name" class="control-label">Name <span class="asterisk text-danger">*</span></label>
                        <input type="text" class="form-control" name="name" id="name" value="{{.user.Name}}" data-parsley-required="true" data-parsley-minlength="2"
                            data-parsley-trigger="change">
                        {{with .editProfileForm.Errors.Name}}<span class="help-block">{{.}}</span>{{end}}
                    </div>
                    <div class="form-group{{with .editProfileForm.Errors.Email}} has-error{{end}}">
                        <label for="email" class="control-label">Email <span class="asterisk text-danger">*</span></label>
                        <input type="text" class="form-control" name="email" id="email" value="{{.user.Email}}" data-parsley-required="true" data-parsley-type="email"
                            data-parsley-whitespace="trim" data-parsley-trigger="change" data-parsley-remote data-parsley-remote-validator="emailCheck"
                            data-parsley-remote-message="">
                        {{with .editProfileForm.Errors.Email}}<span class="help-block">{{.}}</span>{{end}}
                    </div>
                    <div class="form-group">
                        <div class="checkbox">
                            <label class="control-label">
                                <input type="checkbox" name="is_admin" id="is_admin"{{if .user.IsAdmin}} checked{{end}}> Administrator
                            </label>
                        </div>
                    </div>
                    <button role="button" type="submit" class="btn btn-primary" data-loading-text="Updating profile...">Update profile</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                <i class="fa fa-key"></i> Reset Password
            </div>
            <div class="panel-body">
                <form action="/users/{{.user.ID}}/password/reset" method="POST" id="password_reset_form">
                    <input type="hidden" name="_method" value="PUT">
                    <div class="form-group{{with .passwordResetForm.Errors.NewPassword}} has-error{{end}}">
                        <label for="new_password" class="control-label">New password <span class="asterisk text-danger">*</span></label>
                        <input type="password" class="form-control" name="new_password" id="new_password" data-parsley-required="true" data-parsley-minlength="6"
                            data-parsley-trigger="change">
                        {{with .passwordResetForm.Errors.NewPassword}}<span class="help-block">{{.}}</span>{{end}}
                    </div>
                    <div class="form-group{{with .passwordResetForm.Errors.ConfirmPassword}} has-error{{end}}">
                        <label for="confirm_password" class="control-label">Confirm password <span class="asterisk text-danger">*</span></label>
                        <input type="password" class="form-control" name="confirm_password" id="confirm_password" data-parsley-required="true" data-parsley-equalto="#new_password"
                            data-parsley-trigger="change">
                        {{with .passwordResetForm.Errors.ConfirmPassword}}<span class="help-block">{{.}}</span>{{end}}
                    </div>
                    <button role="button" type="submit" class="btn btn-primary" data-loading-text="Updating password...">Update password</button>
                </form>
            </div>
        </div>
    </div>
</div>
{{define "script-user/edit"}}
<script src="/assets/js/parsley/parsley.config.js"></script>
<script src="/assets/js/parsley/parsley.min.js"></script>
<script src="/assets/js/parsley/parsley.event.js"></script>
{{end}} {{define "js-user/edit"}}
<script>
    $(function () {
        $("#edit_profile_form").parsley();
        $("#edit_profile_form").on("submit", function (e) {
            duringSubmitDo(this);
        });

        $("#password_reset_form").parsley();
        $("#password_reset_form").on("submit", function (e) {
            duringSubmitDo(this);
        });

        Parsley.addValidator("mimes", {
            requirementType: "string",
            validateString: function (value, requirement, instance) {
                var file = instance.$element[0].files;

                if (file.length == 0) {
                    return true;
                }
                var allowedMimeTypes = requirement.replace(/[\[\]]+/g, "").split(" ");
                return allowedMimeTypes.indexOf(file[0].type) !== -1;
            },
            messages: {
                en: "{{lang `image_invalid`}}"
            },
            priority: 2
        }).addValidator("maxmegabytes", {
            requirementType: "string",
            validateString: function (value, requirement, instance) {
                var file = instance.$element[0].files;
                var maxMB = requirement * 1048576;

                if (file.length == 0) {
                    return true;
                }
                return file.length === 1 && file[0].size <= maxMB;
            },
            messages: {
                en: "{{lang `image_too_large`}}"
            },
            priority: 1
        });

        Parsley.addAsyncValidator("emailCheck", function (xhr) {
            if (404 === xhr.status) {
                r = $.parseJSON(xhr.responseText);
                this.addError("remote", { message: r.error });
            }
            return 200 === xhr.status;
        }, "/users/{{.user.ID}}/email/check");

        previewImage($("#photo"));
    });

</script>
{{end}}