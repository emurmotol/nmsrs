{{define "content"}}
<div class="panel panel-info">
    <div class="panel-heading"><i class="fa fa-file-o"></i> {{.Title}}</div>
    <div class="panel-body">
        <form action="/users" method="POST" id="create_user_form" enctype="multipart/form-data">
            <div class="row">
                <div class="col-lg-4">
                    <div class="form-alert"></div>
                    <div class="form-group">
                        <label for="photo">Photo</label><br>
                        <img src="{{.Config.Default.UserPhoto}}" data-default-photo="{{.Config.Default.UserPhoto}}" class="img-resopnsive img-rounded"
                            id="preview" height="160" alt="Default">
                        <input type="file" class="form-control" name="photo" id="photo" data-parsley-trigger="change" data-parsley-maxmegabytes="{{.Config.Default.MaxImageUploadSize}}"
                            data-parsley-mime-types="{{.MimeTypes}}">
                    </div>
                    <div class="form-group">
                        <label for="name">Name <span class="asterisk text-danger">*</span></label>
                        <input type="text" class="form-control" name="name" id="name" data-parsley-required="true" data-parsley-minlength="2" data-parsley-trigger="focusout">
                    </div>
                    <div class="form-group">
                        <label for="email">Email <span class="asterisk text-danger">*</span></label>
                        <input type="text" class="form-control" name="email" id="email" data-parsley-required="true" data-parsley-type="email" data-parsley-whitespace="trim"
                            data-parsley-trigger="focusout" data-parsley-remote data-parsley-remote-validator="checkEmailTaken"
                            data-parsley-remote-message="">
                    </div>
                    <div class="form-group">
                        <label for="password">Password <span class="asterisk text-danger">*</span></label>
                        <input type="password" class="form-control" name="password" id="password" data-parsley-required="true" data-parsley-minlength="6"
                            data-parsley-trigger="focusout">
                    </div>
                    <div class="form-group">
                        <label for="confirm_password">Confirm password <span class="asterisk text-danger">*</span></label>
                        <input type="password" class="form-control" name="confirm_password" id="confirm_password" data-parsley-required="true" data-parsley-equalto="#password"
                            data-parsley-trigger="focusout">
                    </div>
                    <div class="form-group">
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" name="is_admin" id="is_admin"> Administrator
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <button role="button" type="submit" class="btn btn-primary" data-loading-text="Creating user...">Create user</button>
        </form>
    </div>
</div>
{{end}} {{define "script"}}
<script>
    $(function () {
        $("#create_user_form").parsley();

        $("#create_user_form").on("submit", function (e) {
            e.preventDefault();
            var data = new FormData(this);
            makeFormRequest(this, data);
        });

        Parsley.addValidator("mimeTypes", {
            requirementType: "string",
            validateString: function (value, requirement, instance) {
                var file = instance.$element[0].files;

                if (file.length == 0) {
                    return true;
                }
                var allowedMimeTypes = requirement.replace(/[\[\]]+/g, "").split(" ");
                return allowedMimeTypes.indexOf(file[0].type) !== -1;
            },
            messages: {
                en: "{{.Lang.ImageInvalid}}"
            },
            priority: 2
        }).addValidator("maxmegabytes", {
            requirementType: "string",
            validateString: function (value, requirement, instance) {
                var file = instance.$element[0].files;
                var maxMB = requirement * 1000000;

                if (file.length == 0) {
                    return true;
                }
                return file.length === 1 && file[0].size <= maxMB;
            },
            messages: {
                en: "{{.Lang.ImageTooLarge}}"
            },
            priority: 1
        });

        Parsley.addAsyncValidator("checkEmailTaken", function (xhr) {
            if (404 === xhr.status) {
                r = $.parseJSON(xhr.responseText);
                this.addError("remote", { message: r.error });
            }
            return 200 === xhr.status;
        }, "/check/email/taken");

        previewImage($("#photo"));
        setCheckboxBoolValue($("#is_admin"));
    });

</script>
{{end}}